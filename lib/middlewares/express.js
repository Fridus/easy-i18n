// Generated by CoffeeScript 1.6.3
(function() {
  var I18nExpress, checkUrlLocale, detection, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('lodash');

  detection = require('../detection');

  checkUrlLocale = function(req, supported_languages) {
    var lang, matches, parsed;
    matches = req.url.match(/^\/([^\/]+)(\/|$)/);
    if (!(matches && matches[1])) {
      return;
    }
    parsed = detection.parseAcceptLanguage(matches[1]);
    lang = detection.bestLanguage(parsed, supported_languages, "unknown");
    if (lang === "unknown") {
      return;
    }
    req.url = req.url.replace(matches[0], '/');
    req.i18n.language = lang;
    return lang;
  };

  I18nExpress = (function() {
    function I18nExpress(options, i18n) {
      this.i18n = i18n;
      this.middleware = __bind(this.middleware, this);
      this.options = _.extend({
        supported_languages: ['en'],
        default_language: 'en',
        locale_on_url: false
      }, options);
    }

    I18nExpress.prototype.middleware = function(req, res, next) {
      var lang, langs,
        _this = this;
      req.i18n = {
        _i18n: this.i18n,
        language: '',
        translate: function(key) {
          var args;
          args = _.toArray(arguments);
          if (args.length === 1) {
            args = _this.parseKey(req, args[0]);
          }
          if (args.length === 2) {
            args = [req.i18n.language].concat(args);
          }
          return _this.i18n.translate.apply(_this.i18n, args);
        }
      };
      if (this.options.locale_on_url) {
        checkUrlLocale(req, this.options.supported_languages);
      }
      langs = detection.parseAcceptLanguage(req.i18n.language || req.headers['accept-language']);
      lang = detection.bestLanguage(langs, this.options.supported_languages, this.options.default_lang);
      req.i18n.language = lang;
      return next();
    };

    I18nExpress.prototype.parseKey = function(req, key) {
      var keys, part;
      keys = key.split(':');
      if (keys < 2) {
        throw 'Invalid key';
      }
      part = keys.shift().split('/');
      if (part.length < 2) {
        part.unshift(req.i18n.language);
      }
      return keys = part.concat(keys);
    };

    return I18nExpress;

  })();

  module.exports = function(options) {
    return function(i18n) {
      var express;
      express = new I18nExpress(options, i18n);
      return i18n.express = express.middleware;
    };
  };

}).call(this);
