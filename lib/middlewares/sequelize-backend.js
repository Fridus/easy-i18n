// Generated by CoffeeScript 1.6.3
(function() {
  var Backend,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Backend = (function() {
    function Backend(_model, _i18n, _options) {
      this._model = _model;
      this._i18n = _i18n;
      this._options = _options != null ? _options : {};
      this.increment = __bind(this.increment, this);
      this.saveChange = __bind(this.saveChange, this);
      this._catchError = __bind(this._catchError, this);
      this._i18n.on('change', this.saveChange);
      if (this._options.increment) {
        this._i18n.on('translate', this.increment);
      }
    }

    Backend.prototype._find = function(language, ns, key) {
      var where;
      where = {
        namespace: ns,
        language: language
      };
      if (key) {
        where.key = key;
      }
      return this._model.find({
        where: where
      });
    };

    Backend.prototype._catchError = function(err) {
      if (err) {
        return this._i18n.logger.error(err);
      }
    };

    Backend.prototype.load = function(language, ns, cb) {
      var _this = this;
      return this._find(ns, language).done(function(err, models) {
        var model, res, _i, _len;
        if (err) {
          return _this._catchError(err);
        }
        res = {};
        if (models) {
          for (_i = 0, _len = models.length; _i < _len; _i++) {
            model = models[_i];
            if (!res[model.language]) {
              res[model.language] = {};
            }
            res[model.language][model.key] = model.value;
          }
        }
        return cb(null, res);
      });
    };

    Backend.prototype.saveChange = function(language, ns, key, value) {
      var _this = this;
      return this._find(language, ns, key).done(function(err, model) {
        if (err) {
          return _this._catchError(err);
        }
        if (!model) {
          model = _this._model.build({
            namespace: ns,
            language: language,
            key: key
          });
        }
        model.value = value;
        return model.save().done(_this._catchError);
      });
    };

    Backend.prototype.dispose = function() {
      this._model = null;
      this._i18n = null;
      return this._options = null;
    };

    Backend.prototype.increment = function(language, ns, key, value) {
      var _this = this;
      return this._find(language, ns, key).done(function(err, model) {
        if (err) {
          return _this._catchError(err);
        }
        if (model) {
          return model.increment('used', 1).done(_this._catchError);
        }
      });
    };

    return Backend;

  })();

  module.exports = function(sequelize, options) {
    return function(i18n) {
      var backend, model;
      model = sequelize["import"](__dirname + '/sequelize-backend-model');
      i18n.backend = backend = new Backend(model, i18n, options);
      return i18n.on('dispose', function() {
        backend.dispose();
        return backend = null;
      });
    };
  };

}).call(this);
