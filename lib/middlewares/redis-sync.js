// Generated by CoffeeScript 1.6.3
(function() {
  var Sync, redis,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  redis = require('redis');

  Sync = (function() {
    function Sync(_options, _i18n) {
      this._options = _options != null ? _options : {};
      this._i18n = _i18n;
      this.onMessage = __bind(this.onMessage, this);
      this.onChange = __bind(this.onChange, this);
      if (!this._options.channel) {
        this._options.channel = 'i18n-redis-sync';
      }
      this._pub = this._options.pubClient || redis.createClient();
      this._sub = this._options.subClient || redis.createClient();
      this._sub.on('message', this.onMessage);
      this._i18n.on('change', this.onChange);
      this._sub.subscribe(this._options.channel);
    }

    Sync.prototype.onChange = function(language, namespace, key, value) {
      return this._pub.publish(this._options.channel, JSON.stringify({
        namespace: namespace,
        language: language,
        key: key,
        value: value
      }));
    };

    Sync.prototype.onMessage = function(channel, message) {
      var resourceChange;
      resourceChange = JSON.parse(message);
      return this._i18n.change(resourceChange.language, resourceChange.namespace, resourceChange.key, resourceChange.value, false);
    };

    Sync.prototype.dispose = function() {
      this._pub.end();
      this._sub.end();
      this._pub = null;
      return this._sub = null;
    };

    return Sync;

  })();

  module.exports = function(options) {
    return function(i18n) {
      var sync;
      sync = new Sync(options, i18n);
      return i18n.on('dispose', function() {
        sync.dispose();
        return sync = null;
      });
    };
  };

}).call(this);
