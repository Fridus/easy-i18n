// Generated by CoffeeScript 1.6.3
(function() {
  var util;

  util = require('util');

  module.exports = {
    /*
    # Parses the HTTP accept-language header and returns a
    # sorted array of objects. Example object:
    # {
    #   lang: 'pl', quality: 0.7
    # }
    */

    parseAcceptLanguage: function(header) {
      var langs, raw_langs;
      if (!header || !header.split) {
        return [];
      }
      raw_langs = header.split(",");
      langs = raw_langs.map(function(raw_lang) {
        var parts, q, qval;
        parts = raw_lang.split(";");
        q = 1;
        if (parts.length > 1 && parts[1].indexOf("q=") === 0) {
          qval = parseFloat(parts[1].split("=")[1]);
          if (isNaN(qval) === false) {
            q = qval;
          }
        }
        return {
          lang: parts[0].trim(),
          quality: q
        };
      });
      return langs.sort(function(a, b) {
        if (a.quality === b.quality) {
          return 0;
        } else if (a.quality < b.quality) {
          return 1;
        } else {
          return -1;
        }
      });
    },
    bestLanguage: function(languages, supported_languages, defaultLanguage) {
      var lower, lq, _i, _len;
      lower = supported_languages.map(function(l) {
        return l.toLowerCase();
      });
      for (_i = 0, _len = languages.length; _i < _len; _i++) {
        lq = languages[_i];
        if (lower.indexOf(lq.lang.toLowerCase()) !== -1) {
          return lq.lang;
        } else if (lower.indexOf(lq.lang.split("-")[0].toLowerCase()) !== -1) {
          return lq.lang.split("-")[0];
        }
      }
      return defaultLanguage;
    },
    localeFrom: function(language) {
      var parts;
      if (!language || !language.split) {
        return "";
      }
      parts = language.split("-");
      if (parts.length === 1) {
        return parts[0].toLowerCase();
      } else if (parts.length === 2) {
        return util.format("%s_%s", parts[0].toLowerCase(), parts[1].toUpperCase());
      } else if (parts.length === 3) {
        return util.format("%s_%s", parts[0].toLowerCase(), parts[2].toUpperCase());
      } else {
        console.error(util.format("Unable to map a local from language code [%s]", language));
        return language;
      }
    },
    languageFrom: function(locale) {
      var parts;
      if (!locale || !locale.split) {
        return "";
      }
      parts = locale.split("_");
      if (parts.length === 1) {
        return parts[0].toLowerCase();
      } else if (parts.length === 2) {
        return util.format("%s-%s", parts[0].toLowerCase(), parts[1].toUpperCase());
      } else if (parts.length === 3) {
        return util.format("%s-%s", parts[0].toLowerCase(), parts[2].toUpperCase());
      } else {
        logger.error(util.format("Unable to map a language from locale code [%s]", locale));
        return locale;
      }
    }
  };

}).call(this);
